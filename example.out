; ModuleID = 'compyle'
source_filename = "compyle"

@intgsp = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@0 = private unnamed_addr constant [2 x i8] c"|\00", align 1

declare i32 @printf(i8*, ...)

define i32 @foo() {
entry:
  ret i32 1
}

define i32 @main() {
entry:
  %x = alloca [5 x i32], align 4
  store [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5], [5 x i32]* %x, align 4
  %y = alloca i32, align 4
  store i32 0, i32* %y, align 4
  %0 = alloca i32, align 4
  store i32 5, i32* %0, align 4
  %j = alloca i32, align 4
  %x1 = load [5 x i32], [5 x i32]* %x, align 4
  %1 = alloca [5 x i32], align 4
  store [5 x i32] %x1, [5 x i32]* %1, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %2, align 4
  br label %loop

loop:                                             ; preds = %loop_increment, %entry
  %3 = load i32, i32* %2, align 4
  %4 = load i32, i32* %0, align 4
  %loopcmp = icmp slt i32 %3, %4
  br i1 %loopcmp, label %loop_body, label %pool

loop_body:                                        ; preds = %loop
  %5 = getelementptr inbounds [5 x i32], [5 x i32]* %1, i32 0, i32 %3
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %j, align 4
  %7 = alloca i32, align 4
  store i32 5, i32* %7, align 4
  %i = alloca i32, align 4
  %x2 = load [5 x i32], [5 x i32]* %x, align 4
  %8 = alloca [5 x i32], align 4
  store [5 x i32] %x2, [5 x i32]* %8, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %9, align 4
  br label %loop3

loop_increment:                                   ; preds = %pool6
  %10 = add i32 %3, 1
  store i32 %10, i32* %2, align 4
  br label %loop

pool:                                             ; preds = %loop
  %y13 = load i32, i32* %y, align 4
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @intgsp, i32 0, i32 0), i32 %y13)
  ret i32 0

loop3:                                            ; preds = %loop_increment5, %loop_body
  %11 = load i32, i32* %9, align 4
  %12 = load i32, i32* %7, align 4
  %loopcmp7 = icmp slt i32 %11, %12
  br i1 %loopcmp7, label %loop_body4, label %pool6

loop_body4:                                       ; preds = %loop3
  %13 = getelementptr inbounds [5 x i32], [5 x i32]* %8, i32 0, i32 %11
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %i, align 4
  %i8 = load i32, i32* %i, align 4
  %tmp = icmp slt i32 %i8, 5
  br i1 %tmp, label %then, label %else

loop_increment5:                                  ; preds = %fi
  %15 = add i32 %11, 1
  store i32 %15, i32* %9, align 4
  br label %loop3

pool6:                                            ; preds = %else, %loop3
  br label %loop_increment

then:                                             ; preds = %loop_body4
  br label %while

else:                                             ; preds = %loop_body4
  br label %pool6

fi:                                               ; preds = %elihw
  %i11 = load i32, i32* %i, align 4
  %16 = load i32, i32* %y, align 4
  %tmp12 = add i32 %16, %i11
  store i32 %tmp12, i32* %y, align 4
  br label %loop_increment5

while:                                            ; preds = %then
  br i1 true, label %while_body, label %elihw

while_body:                                       ; preds = %while
  %i9 = load i32, i32* %i, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @intgsp, i32 0, i32 0), i32 %i9)
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %elihw

elihw:                                            ; preds = %while, %while_body
  br label %fi
}
