; ModuleID = 'compyle'
source_filename = "compyle"

@0 = private unnamed_addr constant [15 x i8] c"returning none\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@intgsp = private unnamed_addr constant [3 x i8] c"%d\00", align 1

declare i32 @printf(i8*, ...)

define i32 @fib(i32 %n) {
entry:
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  %n2 = load i32, i32* %n1, align 4
  %tmp = icmp eq i32 %n2, 1
  %n3 = load i32, i32* %n1, align 4
  %tmp4 = icmp eq i32 %n3, 0
  %tmp5 = or i1 %tmp, %tmp4
  br i1 %tmp5, label %then, label %else

then:                                             ; preds = %entry
  ret i32 1

else:                                             ; preds = %entry
  %n6 = load i32, i32* %n1, align 4
  %tmp7 = sub i32 %n6, 1
  %0 = call i32 @fib(i32 %tmp7)
  %n8 = load i32, i32* %n1, align 4
  %tmp9 = sub i32 %n8, 2
  %1 = call i32 @fib(i32 %tmp9)
  %tmp10 = add i32 %0, %1
  ret i32 %tmp10

end_if:                                           ; No predecessors!
  ret i32 0
}

define void @foo() {
entry:
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0))
  ret void
}

define i32 @main() {
entry:
  %n = alloca i32, align 4
  store i32 0, i32* %n, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %n1 = load i32, i32* %n, align 4
  %tmp = icmp slt i32 %n1, 10
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %n2 = load i32, i32* %n, align 4
  %0 = call i32 @fib(i32 %n2)
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @intgsp, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* %n, align 4
  %tmp4 = add i32 %1, 1
  store i32 %tmp4, i32* %n, align 4
  br label %while

while_end:                                        ; preds = %while
  call void @foo()
  ret i32 0
}
