; ModuleID = 'compyle'
source_filename = "compyle"

@intgsp = private unnamed_addr constant [3 x i8] c"%d\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %x = alloca i32, align 4
  store i32 3, i32* %x, align 4
  br label %while

while:                                            ; preds = %next, %entry
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %0 = load i32, i32* %x, align 4
  %tmp = add i32 %0, 1
  store i32 %tmp, i32* %x, align 4
  %x1 = load i32, i32* %x, align 4
  %tmp2 = icmp slt i32 %x1, 5
  br i1 %tmp2, label %then, label %else

while_end:                                        ; preds = %while
  %x5 = load i32, i32* %x, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @intgsp, i32 0, i32 0), i32 %x5)
  ret i32 0

then:                                             ; preds = %while_body
  %1 = load i32, i32* %x, align 4
  %tmp3 = add i32 %1, 1
  store i32 %tmp3, i32* %x, align 4
  br label %next

else:                                             ; preds = %while_body
  %2 = load i32, i32* %x, align 4
  %tmp4 = sub i32 %2, 1
  store i32 %tmp4, i32* %x, align 4
  br label %next

next:                                             ; preds = %else, %then
  br label %while
}
