type token =
  | COMMA
  | COLON
  | NEWLINE
  | PERIOD
  | INDENT
  | DEDENT
  | DEF
  | RETURN
  | PRINT
  | ARROW
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | IF
  | ELIF
  | ELSE
  | WHILE
  | FOR
  | IN
  | BREAK
  | CONTINUE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | EXP
  | FDIVIDE
  | ASSIGN
  | PLUS_ASSIGN
  | MINUS_ASSIGN
  | TIMES_ASSIGN
  | DIV_ASSIGN
  | MOD_ASSIGN
  | EXP_ASSIGN
  | FDIV_ASSIGN
  | EQ
  | NEQ
  | GT
  | LT
  | GEQ
  | LEQ
  | AND
  | OR
  | NOT
  | INT
  | BOOL
  | FLOAT
  | STRING
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | BOOL_LITERAL of (bool)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 64 "parser.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* COLON *);
  259 (* NEWLINE *);
  260 (* PERIOD *);
  261 (* INDENT *);
  262 (* DEDENT *);
  263 (* DEF *);
  264 (* RETURN *);
  265 (* PRINT *);
  266 (* ARROW *);
  267 (* LPAREN *);
  268 (* RPAREN *);
  269 (* LBRACKET *);
  270 (* RBRACKET *);
  271 (* IF *);
  272 (* ELIF *);
  273 (* ELSE *);
  274 (* WHILE *);
  275 (* FOR *);
  276 (* IN *);
  277 (* BREAK *);
  278 (* CONTINUE *);
  279 (* PLUS *);
  280 (* MINUS *);
  281 (* TIMES *);
  282 (* DIVIDE *);
  283 (* MODULO *);
  284 (* EXP *);
  285 (* FDIVIDE *);
  286 (* ASSIGN *);
  287 (* PLUS_ASSIGN *);
  288 (* MINUS_ASSIGN *);
  289 (* TIMES_ASSIGN *);
  290 (* DIV_ASSIGN *);
  291 (* MOD_ASSIGN *);
  292 (* EXP_ASSIGN *);
  293 (* FDIV_ASSIGN *);
  294 (* EQ *);
  295 (* NEQ *);
  296 (* GT *);
  297 (* LT *);
  298 (* GEQ *);
  299 (* LEQ *);
  300 (* AND *);
  301 (* OR *);
  302 (* NOT *);
  303 (* INT *);
  304 (* BOOL *);
  305 (* FLOAT *);
  306 (* STRING *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  307 (* INT_LITERAL *);
  308 (* FLOAT_LITERAL *);
  309 (* STRING_LITERAL *);
  310 (* ID *);
  311 (* BOOL_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\011\000\005\000\014\000\
\012\000\012\000\015\000\015\000\006\000\008\000\009\000\010\000\
\007\000\016\000\016\000\017\000\017\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\013\000\013\000\013\000\013\000\018\000\018\000\019\000\019\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\003\000\002\000\001\000\002\000\002\000\
\001\000\001\000\001\000\002\000\002\000\004\000\009\000\003\000\
\000\000\001\000\001\000\003\000\002\000\004\000\004\000\006\000\
\004\000\000\000\001\000\001\000\003\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\005\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\004\000\
\001\000\001\000\001\000\001\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\031\000\
\032\000\000\000\033\000\073\000\000\000\000\000\000\000\006\000\
\000\000\000\000\009\000\010\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\012\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\003\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\008\000\004\000\000\000\000\000\000\000\035\000\
\034\000\000\000\000\000\000\000\065\000\066\000\067\000\068\000\
\000\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\025\000\029\000\000\000\022\000\023\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\000\016\000\000\000\020\000\000\000\024\000\000\000\
\014\000\000\000\015\000"

let yydgoto = "\002\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\125\000\119\000\089\000\120\000\121\000\035\000\
\036\000\091\000\092\000"

let yysindex = "\006\000\
\074\255\000\000\092\255\215\254\141\000\006\255\141\000\141\000\
\141\000\141\000\232\254\034\255\036\255\141\000\000\000\000\000\
\000\000\140\000\000\000\000\000\051\000\074\255\236\001\000\000\
\067\255\068\255\000\000\000\000\000\000\074\255\061\255\042\002\
\141\000\091\000\063\255\000\000\059\255\153\001\181\001\056\255\
\000\000\000\000\118\002\241\254\141\000\141\000\141\000\141\000\
\141\000\141\000\141\000\141\000\141\000\000\000\000\000\000\000\
\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
\141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
\060\255\000\000\000\000\000\000\030\255\015\002\141\000\000\000\
\000\000\083\255\083\255\141\000\000\000\000\000\000\000\000\000\
\058\255\120\000\078\255\000\000\042\002\042\002\042\002\042\002\
\042\002\042\002\042\002\042\002\125\002\187\255\187\255\022\255\
\022\255\066\255\000\000\022\255\253\000\253\000\144\255\144\255\
\107\255\107\255\094\002\069\002\141\000\089\255\085\255\097\255\
\000\000\000\000\000\000\099\255\000\000\000\000\209\001\141\000\
\141\000\000\000\125\002\241\254\096\255\030\255\074\255\083\255\
\042\002\000\000\000\000\241\254\000\000\102\255\000\000\100\255\
\000\000\083\255\000\000"

let yyrindex = "\000\000\
\109\000\000\000\000\000\000\000\000\000\000\000\103\255\104\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\255\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\113\255\
\000\000\010\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\255\000\000\105\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\109\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\255\000\000\000\000\009\255\017\255\139\255\071\000\
\219\000\083\001\133\001\147\001\235\255\166\000\212\000\228\255\
\018\000\182\255\000\000\064\000\080\001\126\001\030\001\076\001\
\226\000\016\001\130\001\024\255\000\000\000\000\000\000\137\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\146\255\000\000\
\155\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\240\255\151\000\251\255\000\000\000\000\000\000\000\000\
\000\000\000\000\188\255\000\000\132\255\000\000\021\000\149\000\
\079\000\000\000\037\000"

let yytablesize = 936
let yytable = "\032\000\
\002\000\034\000\034\000\038\000\039\000\055\000\001\000\139\000\
\043\000\045\000\045\000\045\000\031\000\076\000\126\000\144\000\
\033\000\046\000\046\000\046\000\045\000\028\000\045\000\028\000\
\061\000\061\000\061\000\078\000\046\000\040\000\046\000\085\000\
\086\000\087\000\088\000\061\000\041\000\061\000\042\000\090\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\062\000\063\000\054\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\143\000\061\000\074\000\075\000\077\000\
\081\000\034\000\080\000\084\000\003\000\147\000\127\000\117\000\
\004\000\005\000\006\000\118\000\007\000\124\000\008\000\128\000\
\009\000\130\000\132\000\010\000\011\000\063\000\012\000\013\000\
\133\000\134\000\004\000\005\000\006\000\146\000\007\000\135\000\
\008\000\140\000\009\000\145\000\002\000\010\000\011\000\131\000\
\012\000\013\000\026\000\021\000\069\000\026\000\142\000\014\000\
\017\000\071\000\137\000\090\000\015\000\016\000\017\000\018\000\
\019\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\043\000\014\000\043\000\047\000\047\000\047\000\015\000\016\000\
\017\000\018\000\019\000\043\000\019\000\043\000\047\000\002\000\
\047\000\030\000\141\000\043\000\037\000\123\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\138\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\040\000\040\000\
\040\000\069\000\070\000\000\000\000\000\062\000\062\000\062\000\
\000\000\040\000\000\000\040\000\000\000\000\000\000\000\000\000\
\062\000\040\000\062\000\000\000\040\000\040\000\040\000\040\000\
\040\000\000\000\040\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\038\000\038\000\038\000\000\000\
\062\000\062\000\062\000\063\000\063\000\063\000\000\000\038\000\
\000\000\038\000\000\000\000\000\000\000\000\000\063\000\038\000\
\063\000\000\000\038\000\038\000\038\000\038\000\063\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\039\000\039\000\039\000\000\000\063\000\063\000\
\063\000\064\000\064\000\064\000\000\000\039\000\000\000\039\000\
\000\000\000\000\000\000\000\000\064\000\039\000\064\000\000\000\
\039\000\039\000\039\000\039\000\064\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\042\000\042\000\042\000\000\000\064\000\064\000\064\000\048\000\
\048\000\048\000\000\000\042\000\000\000\042\000\000\000\000\000\
\000\000\000\000\048\000\042\000\048\000\000\000\042\000\042\000\
\042\000\042\000\000\000\079\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\057\000\000\000\
\000\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\000\000\000\000\057\000\000\000\044\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\000\000\045\000\007\000\
\000\000\008\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\036\000\036\000\
\036\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\036\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\036\000\014\000\000\000\036\000\036\000\000\000\015\000\
\016\000\017\000\018\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\037\000\037\000\037\000\000\000\
\000\000\000\000\000\000\049\000\049\000\049\000\000\000\037\000\
\000\000\037\000\058\000\058\000\058\000\000\000\049\000\037\000\
\049\000\000\000\037\000\037\000\000\000\058\000\000\000\058\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\059\000\059\000\059\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\000\000\059\000\000\000\059\000\056\000\056\000\
\056\000\000\000\000\000\059\000\067\000\068\000\069\000\070\000\
\000\000\056\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\000\000\
\000\000\056\000\056\000\056\000\057\000\057\000\057\000\000\000\
\054\000\054\000\054\000\050\000\050\000\050\000\000\000\057\000\
\000\000\057\000\000\000\054\000\000\000\054\000\050\000\057\000\
\050\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\057\000\057\000\057\000\054\000\054\000\057\000\
\057\000\057\000\000\000\054\000\054\000\054\000\055\000\055\000\
\055\000\000\000\060\000\060\000\060\000\051\000\051\000\051\000\
\000\000\055\000\000\000\055\000\000\000\060\000\000\000\060\000\
\051\000\055\000\051\000\052\000\052\000\052\000\000\000\000\000\
\000\000\000\000\082\000\044\000\044\000\044\000\052\000\000\000\
\052\000\000\000\000\000\055\000\055\000\000\000\044\000\000\000\
\044\000\055\000\055\000\055\000\057\000\060\000\060\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\000\000\
\057\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\136\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\000\000\057\000\000\000\000\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\057\000\
\000\000\000\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\122\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\057\000\000\000\000\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\057\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\057\000\073\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\057\000\000\000\073\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000"

let yycheck = "\005\000\
\000\000\007\000\008\000\009\000\010\000\022\000\001\000\132\000\
\014\000\001\001\002\001\003\001\054\001\030\000\083\000\140\000\
\011\001\001\001\002\001\003\001\012\001\012\001\014\001\014\001\
\001\001\002\001\003\001\033\000\012\001\054\001\014\001\047\001\
\048\001\049\001\050\001\012\001\003\001\014\001\003\001\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\027\001\028\001\000\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\136\000\045\001\003\001\003\001\011\001\
\014\001\079\000\012\001\020\001\003\001\146\000\084\000\020\001\
\007\001\008\001\009\001\054\001\011\001\003\001\013\001\030\001\
\015\001\012\001\002\001\018\001\019\001\028\001\021\001\022\001\
\012\001\001\001\007\001\008\001\009\001\002\001\011\001\005\001\
\013\001\010\001\015\001\006\001\000\000\018\001\019\001\117\000\
\021\001\022\001\012\001\003\001\012\001\014\001\135\000\046\001\
\012\001\012\001\128\000\129\000\051\001\052\001\053\001\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\001\001\046\001\003\001\001\001\002\001\003\001\051\001\052\001\
\053\001\054\001\055\001\012\001\012\001\014\001\012\001\006\001\
\014\001\003\000\134\000\020\001\008\000\079\000\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\129\000\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\001\001\002\001\
\003\001\042\001\043\001\255\255\255\255\001\001\002\001\003\001\
\255\255\012\001\255\255\014\001\255\255\255\255\255\255\255\255\
\012\001\020\001\014\001\255\255\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\001\001\002\001\003\001\255\255\
\044\001\045\001\046\001\001\001\002\001\003\001\255\255\012\001\
\255\255\014\001\255\255\255\255\255\255\255\255\012\001\020\001\
\014\001\255\255\023\001\024\001\025\001\026\001\020\001\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\006\001\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\001\001\002\001\003\001\255\255\044\001\045\001\
\046\001\001\001\002\001\003\001\255\255\012\001\255\255\014\001\
\255\255\255\255\255\255\255\255\012\001\020\001\014\001\255\255\
\023\001\024\001\025\001\026\001\020\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\001\001\002\001\003\001\255\255\044\001\045\001\046\001\001\001\
\002\001\003\001\255\255\012\001\255\255\014\001\255\255\255\255\
\255\255\255\255\012\001\020\001\014\001\255\255\023\001\024\001\
\025\001\026\001\255\255\001\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\020\001\255\255\002\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\011\001\011\001\
\255\255\013\001\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\001\001\002\001\
\003\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\012\001\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\046\001\255\255\023\001\024\001\255\255\051\001\
\052\001\053\001\054\001\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\255\255\012\001\
\255\255\014\001\001\001\002\001\003\001\255\255\012\001\020\001\
\014\001\255\255\023\001\024\001\255\255\012\001\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\001\001\002\001\003\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\012\001\255\255\014\001\001\001\002\001\
\003\001\255\255\255\255\020\001\040\001\041\001\042\001\043\001\
\255\255\012\001\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\255\255\
\255\255\044\001\045\001\046\001\001\001\002\001\003\001\255\255\
\001\001\002\001\003\001\001\001\002\001\003\001\255\255\012\001\
\255\255\014\001\255\255\012\001\255\255\014\001\012\001\020\001\
\014\001\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\038\001\039\001\044\001\
\045\001\046\001\255\255\044\001\045\001\046\001\001\001\002\001\
\003\001\255\255\001\001\002\001\003\001\001\001\002\001\003\001\
\255\255\012\001\255\255\014\001\255\255\012\001\255\255\014\001\
\012\001\020\001\014\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\002\001\001\001\002\001\003\001\012\001\255\255\
\014\001\255\255\255\255\038\001\039\001\255\255\012\001\255\255\
\014\001\044\001\045\001\046\001\020\001\044\001\045\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\002\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\003\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\020\001\046\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\020\001\255\255\046\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\038\001\039\001\040\001\041\001\042\001\043\001"

let yynames_const = "\
  COMMA\000\
  COLON\000\
  NEWLINE\000\
  PERIOD\000\
  INDENT\000\
  DEDENT\000\
  DEF\000\
  RETURN\000\
  PRINT\000\
  ARROW\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  IN\000\
  BREAK\000\
  CONTINUE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  EXP\000\
  FDIVIDE\000\
  ASSIGN\000\
  PLUS_ASSIGN\000\
  MINUS_ASSIGN\000\
  TIMES_ASSIGN\000\
  DIV_ASSIGN\000\
  MOD_ASSIGN\000\
  EXP_ASSIGN\000\
  FDIV_ASSIGN\000\
  EQ\000\
  NEQ\000\
  GT\000\
  LT\000\
  GEQ\000\
  LEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  STRING\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  BOOL_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
                       ( _1 )
# 532 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
   ( [] )
# 538 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
                  ( _1 :: _2 )
# 546 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
                          ( _2 :: _3 )
# 554 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
              ( Expr(_1) )
# 561 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_stmt) in
    Obj.repr(
# 51 "parser.mly"
                 ( _1 )
# 568 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'return_stmt) in
    Obj.repr(
# 52 "parser.mly"
                       ( _1 )
# 575 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'print_stmt) in
    Obj.repr(
# 53 "parser.mly"
                      ( _1 )
# 582 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 54 "parser.mly"
           ( _1 )
# 589 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt) in
    Obj.repr(
# 55 "parser.mly"
              ( _1 )
# 596 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_stmt) in
    Obj.repr(
# 56 "parser.mly"
            ( _1 )
# 603 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                 ( Break )
# 609 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                    ( Continue )
# 615 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 61 "parser.mly"
                                 ( _3 )
# 622 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 64 "parser.mly"
                                                        ( Function(_2, _4, _7, _9) )
# 632 "parser.ml"
               : 'function_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 67 "parser.mly"
              ( (_1, _3) )
# 640 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
               ( [] )
# 646 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 71 "parser.mly"
                ( _1 )
# 653 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 74 "parser.mly"
         ( [_1] )
# 660 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 75 "parser.mly"
                            ( _1 :: _3 )
# 668 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                         ( Return(_2) )
# 675 "parser.ml"
               : 'return_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 80 "parser.mly"
                     ( If(_2, _4, []) )
# 683 "parser.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 101 "parser.mly"
                        ( While(_2, _4) )
# 691 "parser.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 104 "parser.mly"
                            ( For(_2, _4, _6) )
# 700 "parser.ml"
               : 'for_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                          ( Print(_3) )
# 707 "parser.ml"
               : 'print_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
               ( [] )
# 713 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 111 "parser.mly"
             ( _1 )
# 720 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
        ( [_1] )
# 727 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 115 "parser.mly"
                        ( _1 :: _3 )
# 735 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 118 "parser.mly"
               ( IntLit(_1) )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 119 "parser.mly"
                 ( FloatLit(_1) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                  ( StringLit(_1) )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 121 "parser.mly"
                ( BoolLit(_1) )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 122 "parser.mly"
                              ( ArrayLit(_2) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 123 "parser.mly"
                          ( TupleLit(_2) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                          ( Binop(_1, Add, _3)  )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                          ( Binop(_1, Sub, _3)  )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                          ( Binop(_1, Mult, _3) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                          ( Binop(_1, Div, _3)  )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                          ( Binop(_1, Mod, _3)  )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                          ( Binop(_1, Exp, _3)  )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                          ( Binop(_1, FDiv, _3) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parser.mly"
      ( Id(_1) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                            ( DeclAsn(_1, _3, _5) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                  ( Asn(_1, _3) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                         ( AugAsn(_1, AAAdd, _3) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                         ( AugAsn(_1, AASub, _3)  )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                         ( AugAsn(_1, AAMult, _3) )
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                         ( AugAsn(_1, AADiv, _3)  )
# 889 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                         ( AugAsn(_1, AAMod, _3)  )
# 897 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                         ( AugAsn(_1, AAExp, _3)  )
# 905 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                         ( AugAsn(_1, AAFDiv, _3) )
# 913 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 141 "parser.mly"
                             ( Call(_1, _3) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                    ( Binop(_1, Eq, _3)  )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                    ( Binop(_1, Neq, _3) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                    ( Binop(_1, Gt, _3)  )
# 945 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                    ( Binop(_1, Lt, _3)  )
# 953 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                    ( Binop(_1, Geq, _3) )
# 961 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                    ( Binop(_1, Leq, _3) )
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                   ( Binop(_1, And, _3) )
# 977 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                   ( Binop(_1, Or, _3)  )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                   ( Not(_2)      )
# 992 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                ( In(_1, _3) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                    ( NotIn(_1, _4) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
     ( Int )
# 1014 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
        ( Bool )
# 1020 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
         ( Float )
# 1026 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
          ( String )
# 1032 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
                ( [] )
# 1038 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 162 "parser.mly"
              ( _1 )
# 1045 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
       ( [_1] )
# 1052 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 166 "parser.mly"
                         ( _1 :: _3 )
# 1060 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
